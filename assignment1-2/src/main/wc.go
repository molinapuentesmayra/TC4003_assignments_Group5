package main

import (
	"fmt"
	"mapreduce"
	"os"
	"strings"
	"unicode"
	"strconv"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	//fmt.Println("Entering mapF function")

	var keyValuePair []mapreduce.KeyValue
	
	// Set up function for FieldsFunc, breaks when it detects nonletter
	f := func(r rune) bool {
		return !unicode.IsLetter(r)
	}
	
	//FieldsFunc w/function f above returns string in words
	words := strings.FieldsFunc(value,f)

	// Iterate and add a new key/value pair per word, setting value to 1
	for _ , token := range words {
        keyValuePair = append(keyValuePair, mapreduce.KeyValue{token, "1"})
    }
	
	//fmt.Printf("Out of MapF Key/Value pair %v", keyValuePair)
	
    return keyValuePair
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	//fmt.Println("Entering reduceF function")
	/*
	// Iterate over values received, convert values from string to in,
	// accumulate the sum, convert back to string and return
	sum := 0
	for _ , value := range values {
		i, _ := strconv.Atoi(value)
		sum += i
    }

    return strconv.Itoa(sum)
    */

    /* Work around previous solution, avoiding unnecessary loops and conversions.
     * Since all the values are 1, the sum of these is equal to the number 
     * of values (the length of the string
     */
    sum := strconv.Itoa(len(values)) 

    return sum
		
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
